     
SPECIFICATION
: HEADER BODY_ELEMENTS

HEADER
: CASM IDENTIFIER

BODY_ELEMENTS
: BODY_ELEMENTS BODY_ELEMENT
| BODY_ELEMENT

BODY_ELEMENT
: PROVIDER_SYNTAX
| OPTION_SYNTAX
| ENUM_SYNTAX
| FUNCTION_DEFINITION
| DERIVED_SYNTAX
| INIT_SYNTAX
| RULE_SYNTAX

INIT_SYNTAX
: INIT IDENTIFIER

PROVIDER_SYNTAX
: PROVIDER IDENTIFIER

OPTION_SYNTAX
: OPTION IDENTIFIER "." IDENTIFIER IDENTIFIER
;

ENUM_SYNTAX
: ENUM IDENTIFIER "=" "{" IDENTIFIER_LIST "}"

DERIVED_SYNTAX
: DERIVED IDENTIFIER "(" PARAM_LIST ")" "=" EXPRESSION
| DERIVED IDENTIFIER "=" EXPRESSION
| DERIVED IDENTIFIER "(" ")" "=" EXPRESSION
| DERIVED IDENTIFIER "(" PARAM_LIST ")" ":" TYPE_SYNTAX "=" EXPRESSION
| DERIVED IDENTIFIER ":" TYPE_SYNTAX "=" EXPRESSION
| DERIVED IDENTIFIER "(" ")" ":" TYPE_SYNTAX "=" EXPRESSION

FUNCTION_DEFINITION
: FUNCTION "(" IDENTIFIER_LIST ")" IDENTIFIER FUNCTION_SIGNATURE INITIALIZERS
| FUNCTION "(" IDENTIFIER_LIST ")" IDENTIFIER FUNCTION_SIGNATURE
| FUNCTION IDENTIFIER FUNCTION_SIGNATURE INITIALIZERS
| FUNCTION IDENTIFIER FUNCTION_SIGNATURE

IDENTIFIER_LIST
: IDENTIFIER_LIST_NO_COMMA ","
| IDENTIFIER_LIST_NO_COMMA

IDENTIFIER_LIST_NO_COMMA
: IDENTIFIER_LIST_NO_COMMA "," IDENTIFIER
      $$.push_back($3);
| IDENTIFIER

FUNCTION_SIGNATURE
: ":" ARROW TYPE_SYNTAX
| ":" TYPE_IDENTIFIER_STARLIST ARROW TYPE_SYNTAX

PARAM
: IDENTIFIER ":" TYPE_SYNTAX
| IDENTIFIER

PARAM_LIST
: PARAM_LIST_NO_COMMA
| PARAM_LIST_NO_COMMA ","

PARAM_LIST_NO_COMMA
: PARAM_LIST_NO_COMMA "," PARAM
| PARAM

TYPE_IDENTIFIER_STARLIST
: TYPE_SYNTAX "*" TYPE_IDENTIFIER_STARLIST
| TYPE_SYNTAX "*"
| TYPE_SYNTAX

TYPE_SYNTAX
: IDENTIFIER
| IDENTIFIER "(" INTEGER_NUMBER ")"
| IDENTIFIER "(" TYPE_SYNTAX_LIST ")"
| IDENTIFIER "(" INTEGER_NUMBER DOTDOT INTEGER_NUMBER ")"

TYPE_SYNTAX_LIST
: TYPE_SYNTAX "," TYPE_SYNTAX_LIST
| TYPE_SYNTAX ","
| TYPE_SYNTAX

INITIALIZERS
: INITIALLY "{" INITIALIZER_LIST "}"
| INITIALLY "{" "}"

INITIALIZER_LIST
: INITIALIZER_LIST "," INITIALIZER
| INITIALIZER_LIST ","
| INITIALIZER

INITIALIZER
: ATOM
| ATOM ARROW ATOM

ATOM
: FUNCTION_SYNTAX
| VALUE
| BRACKET_EXPRESSION

VALUE
: RULEREF
| NUMBER
| STRCONST
| LISTCONST
| NUMBER_RANGE
| SYMBOL
| SELF
| UNDEF
| TRUE
| FALSE

INTEGER_NUMBER
: "+" INTEGERCONST %prec UPLUS
| "-" INTEGERCONST %prec UMINUS
| INTEGERCONST

NUMBER
: INTEGER_NUMBER
| "+" FLOATINGCONST %prec UPLUS
| "-" FLOATINGCONST %prec UMINUS
| FLOATINGCONST
| "+" RATIONALCONST %prec UPLUS
| "-" RATIONALCONST %prec UMINUS
| RATIONALCONST

RULEREF
: "@" IDENTIFIER

NUMBER_RANGE
: "[" NUMBER DOTDOT NUMBER "]"

LISTCONST
: "[" EXPRESSION_LIST "]"
| "[" "]"

EXPRESSION_LIST
: EXPRESSION_LIST_NO_COMMA
| EXPRESSION_LIST_NO_COMMA ","

EXPRESSION_LIST_NO_COMMA
: EXPRESSION_LIST_NO_COMMA"," EXPRESSION
| EXPRESSION

EXPRESSION
: EXPRESSION "+" EXPRESSION
| EXPRESSION "-" EXPRESSION
| EXPRESSION "*" EXPRESSION
| EXPRESSION "/" EXPRESSION
| EXPRESSION "%" EXPRESSION
| EXPRESSION RATIONAL_DIV EXPRESSION
| EXPRESSION NEQUAL EXPRESSION
| EXPRESSION "=" EXPRESSION
| EXPRESSION "<" EXPRESSION
| EXPRESSION ">" EXPRESSION
| EXPRESSION LESSEQ EXPRESSION
| EXPRESSION GREATEREQ EXPRESSION
| EXPRESSION OR EXPRESSION
| EXPRESSION XOR EXPRESSION
| EXPRESSION AND EXPRESSION
| NOT EXPRESSION
| ATOM

BRACKET_EXPRESSION
: "(" EXPRESSION ")"

FUNCTION_SYNTAX
: IDENTIFIER
| IDENTIFIER "(" ")"
| IDENTIFIER "(" EXPRESSION_LIST ")"

RULE_STMT
: SEQ_SYNTAX
| PAR_SYNTAX
| SIMPLE_STMT

RULE_SYNTAX
: RULE IDENTIFIER "=" RULE_STMT
| RULE IDENTIFIER "(" ")" "=" RULE_STMT
| RULE IDENTIFIER "(" PARAM_LIST ")" "=" RULE_STMT
/* again, with dump specification */
| RULE IDENTIFIER DUMPS DUMPSPEC_LIST "=" RULE_STMT
| RULE IDENTIFIER "(" ")" DUMPS DUMPSPEC_LIST "=" RULE_STMT
| RULE IDENTIFIER "(" PARAM_LIST ")" DUMPS DUMPSPEC_LIST "=" RULE_STMT

DUMPSPEC_LIST
: DUMPSPEC_LIST "," DUMPSPEC
| DUMPSPEC

DUMPSPEC
: "(" IDENTIFIER_LIST ")" ARROW IDENTIFIER

SIMPLE_STMT
: ASSERT_SYNTAX
| ASSURE_SYNTAX
| DIEDIE_SYNTAX
| IMPOSSIBLE_SYNTAX
| DEBUG_SYNTAX
| PRINT_SYNTAX
| UPDATE_SYNTAX
| CASE_SYNTAX
| CALL_SYNTAX
| IFTHENELSE
| LET_SYNTAX
| PUSH_SYNTAX
| POP_SYNTAX
| FORALL_SYNTAX
| ITERATE_SYNTAX
| SKIP
| IDENTIFIER
{
}
| INTERN EXPRESSION_LIST
| OBJDUMP "(" IDENTIFIER ")"

STATEMENT
: SIMPLE_STMT
| SEQ_SYNTAX
| PAR_SYNTAX

ASSERT_SYNTAX
: ASSERT EXPRESSION

ASSURE_SYNTAX
: ASSURE EXPRESSION

DIEDIE_SYNTAX
: DIEDIE EXPRESSION
| DIEDIE
*/
IMPOSSIBLE_SYNTAX
: IMPOSSIBLE

DEBUG_SYNTAX
: DEBUG IDENTIFIER DEBUG_ATOM_LIST

DEBUG_ATOM_LIST
: DEBUG_ATOM_LIST "+" ATOM
| ATOM

PRINT_SYNTAX
: PRINT DEBUG_ATOM_LIST

UPDATE_SYNTAX
: FUNCTION_SYNTAX UPDATE EXPRESSION

CASE_SYNTAX
: CASE EXPRESSION OF CASE_LABEL_LIST ENDCASE

CASE_LABEL_LIST
: CASE_LABEL_LIST CASE_LABEL
| CASE_LABEL

CASE_LABEL
: CASE_LABEL_DEFAULT
| CASE_LABEL_NUMBER
| CASE_LABEL_IDENT
| CASE_LABEL_STRING

CASE_LABEL_DEFAULT
: DEFAULT ":" STATEMENT

CASE_LABEL_NUMBER
: NUMBER ":" STATEMENT

CASE_LABEL_IDENT
: FUNCTION_SYNTAX ":" STATEMENT

CASE_LABEL_STRING
: STRCONST ":" STATEMENT

CALL_SYNTAX
: CALL "(" EXPRESSION ")" "(" EXPRESSION_LIST ")"
| CALL "(" EXPRESSION ")"
| CALL IDENTIFIER "(" EXPRESSION_LIST ")"
| CALL IDENTIFIER

SEQ_SYNTAX
: SEQ_BRACKET STATEMENTS ENDSEQ_BRACKET
| SEQ STATEMENTS ENDSEQ

PAR_SYNTAX
: "{" STATEMENTS "}"
| PAR STATEMENTS ENDPAR

STATEMENTS
: STATEMENTS STATEMENT
| STATEMENT

IFTHENELSE
: IF EXPRESSION THEN STATEMENT
| IF EXPRESSION THEN STATEMENT ELSE STATEMENT

LET_SYNTAX
: LET IDENTIFIER "=" 
| LET IDENTIFIER ":" TYPE_SYNTAX "="

PUSH_SYNTAX
: PUSH EXPRESSION INTO FUNCTION_SYNTAX

POP_SYNTAX
: POP FUNCTION_SYNTAX FROM FUNCTION_SYNTAX

FORALL_SYNTAX
: FORALL IDENTIFIER IN EXPRESSION DO STATEMENT

ITERATE_SYNTAX
: ITERATE STATEMENT
