     
SPECIFICATION
: HEADER BODY_ELEMENTS

HEADER
: CASM IDENTIFIER

BODY_ELEMENTS
: BODY_ELEMENTS BODY_ELEMENT
| BODY_ELEMENT

BODY_ELEMENT
: OPTION_SYNTAX
| ENUM_SYNTAX
| FUNCTION_DEFINITION
| DERIVED_SYNTAX
| INIT_SYNTAX
| RULE_SYNTAX

INIT_SYNTAX
: INIT IDENTIFIER

OPTION_SYNTAX
: OPTION IDENTIFIER DOT IDENTIFIER IDENTIFIER
;

ENUM_SYNTAX
: ENUM IDENTIFIER EQUAL LCURPAREN IDENTIFIER_LIST RCURPAREN

DERIVED_SYNTAX
: DERIVED IDENTIFIER LPAREN PARAM_LIST RPAREN EQUAL EXPRESSION
| DERIVED IDENTIFIER EQUAL EXPRESSION
| DERIVED IDENTIFIER LPAREN RPAREN EQUAL EXPRESSION
| DERIVED IDENTIFIER LPAREN PARAM_LIST RPAREN COLON TYPE_SYNTAX EQUAL EXPRESSION
| DERIVED IDENTIFIER COLON TYPE_SYNTAX EQUAL EXPRESSION
| DERIVED IDENTIFIER LPAREN RPAREN COLON TYPE_SYNTAX EQUAL EXPRESSION

FUNCTION_DEFINITION
: FUNCTION LPAREN IDENTIFIER_LIST RPAREN IDENTIFIER FUNCTION_SIGNATURE INITIALIZERS
| FUNCTION LPAREN IDENTIFIER_LIST RPAREN IDENTIFIER FUNCTION_SIGNATURE
| FUNCTION IDENTIFIER FUNCTION_SIGNATURE INITIALIZERS
| FUNCTION IDENTIFIER FUNCTION_SIGNATURE

IDENTIFIER_LIST
: IDENTIFIER_LIST_NO_COMMA COMMA
| IDENTIFIER_LIST_NO_COMMA

IDENTIFIER_LIST_NO_COMMA
: IDENTIFIER_LIST_NO_COMMA COMMA IDENTIFIER
| IDENTIFIER

FUNCTION_SIGNATURE
: COLON ARROW TYPE_SYNTAX
| COLON TYPE_IDENTIFIER_STARLIST ARROW TYPE_SYNTAX

PARAM
: IDENTIFIER COLON TYPE_SYNTAX
| IDENTIFIER

PARAM_LIST
: PARAM_LIST_NO_COMMA
| PARAM_LIST_NO_COMMA COMMA

PARAM_LIST_NO_COMMA
: PARAM_LIST_NO_COMMA COMMA PARAM
| PARAM

TYPE_IDENTIFIER_STARLIST
: TYPE_SYNTAX STAR TYPE_IDENTIFIER_STARLIST
| TYPE_SYNTAX STAR
| TYPE_SYNTAX

TYPE_SYNTAX
: IDENTIFIER
| IDENTIFIER LPAREN INTEGER_NUMBER RPAREN
| IDENTIFIER LPAREN TYPE_SYNTAX_LIST RPAREN
| IDENTIFIER LPAREN INTEGER_NUMBER DOTDOT INTEGER_NUMBER RPAREN

TYPE_SYNTAX_LIST
: TYPE_SYNTAX COMMA TYPE_SYNTAX_LIST
| TYPE_SYNTAX COMMA
| TYPE_SYNTAX

INITIALIZERS
: INITIALLY LCURPAREN INITIALIZER_LIST RCURPAREN
| INITIALLY LCURPAREN RCURPAREN

INITIALIZER_LIST
: INITIALIZER_LIST COMMA INITIALIZER
| INITIALIZER_LIST COMMA
| INITIALIZER

INITIALIZER
: ATOM
| ATOM ARROW ATOM

ATOM
: FUNCTION_SYNTAX
| VALUE
| LPAREN EXPRESSION RPAREN
| PLUS LPAREN EXPRESSION RPAREN %prec UPLUS
| MINUS LPAREN EXPRESSION RPAREN %prec UMINUS

VALUE
: RULEREF
| NUMBER
| STRCONST
| LISTCONST
      $$ = new ListAtom( @$, $1 );
| NUMBER_RANGE
| SELF
| UNDEFINED
| BOOLEAN

UNDEFINED
: UNDEF

BOOLEAN
: TRUE
      $$ = new BooleanAtom( @$, true );
| FALSE

NUMBER
: INTEGER_NUMBER
      $$ = $1;
| FLOATING_NUMBER
| RATIONAL_NUMBER

INTEGER_NUMBER
: INTEGERCONST
| PLUS INTEGER_NUMBER %prec UPLUS
| MINUS INTEGER_NUMBER %prec UMINUS

FLOATING_NUMBER
: FLOATINGCONST
| PLUS FLOATING_NUMBER %prec UPLUS
      $$ = $2;
| MINUS FLOATING_NUMBER %prec UMINUS

RATIONAL_NUMBER
: RATIONALCONST
| PLUS RATIONAL_NUMBER %prec UPLUS
      $$ = $2;
| MINUS RATIONALCONST %prec UMINUS

RULEREF
: AT IDENTIFIER

NUMBER_RANGE
: LSQPAREN NUMBER DOTDOT NUMBER RSQPAREN

LISTCONST
: LSQPAREN EXPRESSION_LIST RSQPAREN
| LSQPAREN RSQPAREN

EXPRESSION_LIST
: EXPRESSION_LIST_NO_COMMA
| EXPRESSION_LIST_NO_COMMA COMMA

EXPRESSION_LIST_NO_COMMA
: EXPRESSION_LIST_NO_COMMA COMMA EXPRESSION
| EXPRESSION

EXPRESSION
: EXPRESSION PLUS EXPRESSION
| EXPRESSION MINUS EXPRESSION
| EXPRESSION STAR EXPRESSION
| EXPRESSION SLASH EXPRESSION
| EXPRESSION PERCENT EXPRESSION
| EXPRESSION RATIONAL_DIV EXPRESSION
| EXPRESSION NEQUAL EXPRESSION
| EXPRESSION EQUAL EXPRESSION
| EXPRESSION LESSER EXPRESSION
| EXPRESSION GREATER EXPRESSION
| EXPRESSION LESSEQ EXPRESSION
| EXPRESSION GREATEREQ EXPRESSION
| EXPRESSION OR EXPRESSION
| EXPRESSION XOR EXPRESSION
| EXPRESSION AND EXPRESSION
| NOT EXPRESSION
| ATOM

FUNCTION_SYNTAX
: IDENTIFIER
| IDENTIFIER LPAREN RPAREN
| IDENTIFIER LPAREN EXPRESSION_LIST RPAREN

SCOPE
: SEQ_SYNTAX
| PAR_SYNTAX

RULE_STMT
: SCOPE
| SIMPLE_STMT

RULE_SYNTAX
: RULE IDENTIFIER EQUAL RULE_STMT
| RULE IDENTIFIER LPAREN RPAREN EQUAL RULE_STMT
| RULE IDENTIFIER LPAREN PARAM_LIST RPAREN EQUAL RULE_STMT
| RULE IDENTIFIER DUMPS DUMPSPEC_LIST EQUAL RULE_STMT
| RULE IDENTIFIER LPAREN RPAREN DUMPS DUMPSPEC_LIST EQUAL RULE_STMT
| RULE IDENTIFIER LPAREN PARAM_LIST RPAREN DUMPS DUMPSPEC_LIST EQUAL RULE_STMT

DUMPSPEC_LIST
: DUMPSPEC_LIST COMMA DUMPSPEC
| DUMPSPEC

DUMPSPEC
: LPAREN IDENTIFIER_LIST RPAREN ARROW IDENTIFIER

SIMPLE_STMT
: ASSERT_SYNTAX
| ASSURE_SYNTAX
| DIEDIE_SYNTAX
| IMPOSSIBLE_SYNTAX
| DEBUG_SYNTAX
| PRINT_SYNTAX
| UPDATE_SYNTAX
| CASE_SYNTAX
| CALL_SYNTAX
| IFTHENELSE
| LET_SYNTAX
| PUSH_SYNTAX
| POP_SYNTAX
| FORALL_SYNTAX
| ITERATE_SYNTAX
| SKIP
| IDENTIFIER

STATEMENT
: SCOPE
| SIMPLE_STMT

ASSERT_SYNTAX
: ASSERT EXPRESSION

ASSURE_SYNTAX
: ASSURE EXPRESSION

DIEDIE_SYNTAX
: DIEDIE EXPRESSION
| DIEDIE

IMPOSSIBLE_SYNTAX
: IMPOSSIBLE

PRINT_SYNTAX
: PRINT EXPRESSION

DEBUG_SYNTAX
: DEBUG IDENTIFIER EXPRESSION

UPDATE_SYNTAX
: FUNCTION_SYNTAX UPDATE EXPRESSION

CASE_SYNTAX
: CASE EXPRESSION OF LCURPAREN CASE_LABEL_LIST RCURPAREN

CASE_LABEL_LIST
: CASE_LABEL CASE_LABEL_LIST
| CASE_LABEL

CASE_LABEL
: CASE_VALUE COLON SCOPE

CASE_VALUE
: DEFAULT
      $$ = nullptr;
| UNDEFINED
      $$ = $1;
| BOOLEAN
      $$ = $1;
| NUMBER
      $$ = $1;
| STRCONST
      $$ = new StringAtom( @$, std::move( $1 ) );
| FUNCTION_SYNTAX

CALL_SYNTAX
: CALL LPAREN EXPRESSION RPAREN LPAREN EXPRESSION_LIST RPAREN
| CALL LPAREN EXPRESSION RPAREN
| CALL IDENTIFIER LPAREN EXPRESSION_LIST RPAREN
| CALL IDENTIFIER

SEQ_SYNTAX
: SEQ_BRACKET STATEMENTS ENDSEQ_BRACKET
| SEQ STATEMENTS ENDSEQ

PAR_SYNTAX
: LCURPAREN STATEMENTS RCURPAREN
| PAR STATEMENTS ENDPAR

STATEMENTS
: STATEMENTS STATEMENT
| STATEMENT

IFTHENELSE
: IF EXPRESSION THEN STATEMENT
| IF EXPRESSION THEN STATEMENT ELSE STATEMENT

LET_SYNTAX
: LET IDENTIFIER EQUAL
| LET IDENTIFIER COLON TYPE_SYNTAX EQUAL

PUSH_SYNTAX
: PUSH EXPRESSION INTO FUNCTION_SYNTAX

POP_SYNTAX
: POP FUNCTION_SYNTAX FROM FUNCTION_SYNTAX

FORALL_SYNTAX
: FORALL IDENTIFIER IN EXPRESSION DO STATEMENT

ITERATE_SYNTAX
: ITERATE STATEMENT
