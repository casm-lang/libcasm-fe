/*
 * Recursion in CoreASM
 */ 

CASM Fibonacci


init InitRule

rule InitRule = 
	let n = 27 in 
		seq
		print "Fibonacci(" + n + ") using dynamic programming: " 
		call fibo_d(n)
		print "=" + fibo(n)
		program(self) := undef
		endseq

function fibo : Integer -> Integer

rule fibo_d(x:Integer) = 
	iterate
		if fibo(x) = undef then { 
			if x < 0 then fibo(x) := 0
			else if x < 2 then fibo(x) := x
			else seq
				call fibo_d(x-2)
				call fibo_d(x-1)
				fibo(x) := fibo(x-2) + fibo(x-1)
			endseq
		}

